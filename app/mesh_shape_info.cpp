/* This file is autogenerated by 'generate_mesh_shape_info.py'. Don't edit
it manually; changes will be overwritten. */

#include "mesh_shape_info.hpp"

#include <assert.h>

namespace os2cx {

class ElementShapeInfoTetrahedron4 : public ElementShapeInfo {
public:

    ElementShapeInfoTetrahedron4() {
        nodes = std::vector<Node>({
            Node::Corner,
            Node::Corner,
            Node::Corner,
            Node::Corner,
        });
        faces = std::vector<std::vector<int> >({
            std::vector<int>({ 0, 2, 1 }),
            std::vector<int>({ 0, 1, 3 }),
            std::vector<int>({ 1, 2, 3 }),
            std::vector<int>({ 0, 3, 2 }),
        });
    }

    Volume volume(const Point *ps) const {
        return
            -0.166666666667*ps[0].vector.x*ps[1].vector.y*ps[2].vector.z
            +0.166666666667*ps[0].vector.x*ps[1].vector.y*ps[3].vector.z
            +0.166666666667*ps[0].vector.x*ps[1].vector.z*ps[2].vector.y
            -0.166666666667*ps[0].vector.x*ps[1].vector.z*ps[3].vector.y
            -0.166666666667*ps[0].vector.x*ps[2].vector.y*ps[3].vector.z
            +0.166666666667*ps[0].vector.x*ps[2].vector.z*ps[3].vector.y
            +0.166666666667*ps[0].vector.y*ps[1].vector.x*ps[2].vector.z
            -0.166666666667*ps[0].vector.y*ps[1].vector.x*ps[3].vector.z
            -0.166666666667*ps[0].vector.y*ps[1].vector.z*ps[2].vector.x
            +0.166666666667*ps[0].vector.y*ps[1].vector.z*ps[3].vector.x
            +0.166666666667*ps[0].vector.y*ps[2].vector.x*ps[3].vector.z
            -0.166666666667*ps[0].vector.y*ps[2].vector.z*ps[3].vector.x
            -0.166666666667*ps[0].vector.z*ps[1].vector.x*ps[2].vector.y
            +0.166666666667*ps[0].vector.z*ps[1].vector.x*ps[3].vector.y
            +0.166666666667*ps[0].vector.z*ps[1].vector.y*ps[2].vector.x
            -0.166666666667*ps[0].vector.z*ps[1].vector.y*ps[3].vector.x
            -0.166666666667*ps[0].vector.z*ps[2].vector.x*ps[3].vector.y
            +0.166666666667*ps[0].vector.z*ps[2].vector.y*ps[3].vector.x
            +0.166666666667*ps[1].vector.x*ps[2].vector.y*ps[3].vector.z
            -0.166666666667*ps[1].vector.x*ps[2].vector.z*ps[3].vector.y
            -0.166666666667*ps[1].vector.y*ps[2].vector.x*ps[3].vector.z
            +0.166666666667*ps[1].vector.y*ps[2].vector.z*ps[3].vector.x
            +0.166666666667*ps[1].vector.z*ps[2].vector.x*ps[3].vector.y
            -0.166666666667*ps[1].vector.z*ps[2].vector.y*ps[3].vector.x;
    }

    Volume volume_for_node(int node, const Point *ps) const {
        switch (node) {
        case 0:
            return
                -0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[2].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[2].vector.y
                -0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[3].vector.y
                -0.0416666666667*ps[0].vector.x*ps[2].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[2].vector.z*ps[3].vector.y
                +0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[2].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[2].vector.x
                +0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[3].vector.x
                +0.0416666666667*ps[0].vector.y*ps[2].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[2].vector.z*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[2].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[2].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[2].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[2].vector.y*ps[3].vector.x
                +0.0416666666667*ps[1].vector.x*ps[2].vector.y*ps[3].vector.z
                -0.0416666666667*ps[1].vector.x*ps[2].vector.z*ps[3].vector.y
                -0.0416666666667*ps[1].vector.y*ps[2].vector.x*ps[3].vector.z
                +0.0416666666667*ps[1].vector.y*ps[2].vector.z*ps[3].vector.x
                +0.0416666666667*ps[1].vector.z*ps[2].vector.x*ps[3].vector.y
                -0.0416666666667*ps[1].vector.z*ps[2].vector.y*ps[3].vector.x;

        case 1:
            return
                -0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[2].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[2].vector.y
                -0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[3].vector.y
                -0.0416666666667*ps[0].vector.x*ps[2].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[2].vector.z*ps[3].vector.y
                +0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[2].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[2].vector.x
                +0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[3].vector.x
                +0.0416666666667*ps[0].vector.y*ps[2].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[2].vector.z*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[2].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[2].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[2].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[2].vector.y*ps[3].vector.x
                +0.0416666666667*ps[1].vector.x*ps[2].vector.y*ps[3].vector.z
                -0.0416666666667*ps[1].vector.x*ps[2].vector.z*ps[3].vector.y
                -0.0416666666667*ps[1].vector.y*ps[2].vector.x*ps[3].vector.z
                +0.0416666666667*ps[1].vector.y*ps[2].vector.z*ps[3].vector.x
                +0.0416666666667*ps[1].vector.z*ps[2].vector.x*ps[3].vector.y
                -0.0416666666667*ps[1].vector.z*ps[2].vector.y*ps[3].vector.x;

        case 2:
            return
                -0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[2].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[2].vector.y
                -0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[3].vector.y
                -0.0416666666667*ps[0].vector.x*ps[2].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[2].vector.z*ps[3].vector.y
                +0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[2].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[2].vector.x
                +0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[3].vector.x
                +0.0416666666667*ps[0].vector.y*ps[2].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[2].vector.z*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[2].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[2].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[2].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[2].vector.y*ps[3].vector.x
                +0.0416666666667*ps[1].vector.x*ps[2].vector.y*ps[3].vector.z
                -0.0416666666667*ps[1].vector.x*ps[2].vector.z*ps[3].vector.y
                -0.0416666666667*ps[1].vector.y*ps[2].vector.x*ps[3].vector.z
                +0.0416666666667*ps[1].vector.y*ps[2].vector.z*ps[3].vector.x
                +0.0416666666667*ps[1].vector.z*ps[2].vector.x*ps[3].vector.y
                -0.0416666666667*ps[1].vector.z*ps[2].vector.y*ps[3].vector.x;

        case 3:
            return
                -0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[2].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[2].vector.y
                -0.0416666666667*ps[0].vector.x*ps[1].vector.z*ps[3].vector.y
                -0.0416666666667*ps[0].vector.x*ps[2].vector.y*ps[3].vector.z
                +0.0416666666667*ps[0].vector.x*ps[2].vector.z*ps[3].vector.y
                +0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[2].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[2].vector.x
                +0.0416666666667*ps[0].vector.y*ps[1].vector.z*ps[3].vector.x
                +0.0416666666667*ps[0].vector.y*ps[2].vector.x*ps[3].vector.z
                -0.0416666666667*ps[0].vector.y*ps[2].vector.z*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[2].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[2].vector.x
                -0.0416666666667*ps[0].vector.z*ps[1].vector.y*ps[3].vector.x
                -0.0416666666667*ps[0].vector.z*ps[2].vector.x*ps[3].vector.y
                +0.0416666666667*ps[0].vector.z*ps[2].vector.y*ps[3].vector.x
                +0.0416666666667*ps[1].vector.x*ps[2].vector.y*ps[3].vector.z
                -0.0416666666667*ps[1].vector.x*ps[2].vector.z*ps[3].vector.y
                -0.0416666666667*ps[1].vector.y*ps[2].vector.x*ps[3].vector.z
                +0.0416666666667*ps[1].vector.y*ps[2].vector.z*ps[3].vector.x
                +0.0416666666667*ps[1].vector.z*ps[2].vector.x*ps[3].vector.y
                -0.0416666666667*ps[1].vector.z*ps[2].vector.y*ps[3].vector.x;

        default: assert(false);
        }
    }
};

const ElementShapeInfo &ElementShapeInfo::tetrahedron4() {
    static ElementShapeInfoTetrahedron4 info;
    return info;
}

} /* namespace os2cx */
